package main

import (
	"fmt"
	"testing"
)

func testExample(t *testing.T, str string, expected []float64) {
	actual := parseNumSequence(str)
	fmt.Printf("Actual: %v\n", actual)
	if len(expected) != len(actual) {
		t.Fatalf("Expected %d elements, got %d", len(expected), len(actual))
	}
	for idx := range expected {
		if expected[idx] != actual[idx] {
			t.Fatalf("Expected %f, got %f", expected[idx], actual[idx])
		}
	}
}

func TestNumericParse(t *testing.T) {
	str := ".41.28.79.58,1.18.88,1.06-.23,2.05-.52,2.99-.91-.12-.09-.25-.19-.37-.27"
	expected := []float64{0.41, 0.28, 0.79, 0.58, 1.18, 0.88, 1.06, -0.23, 2.05, -0.52, 2.99, -0.91, -0.12, -0.09, -0.25, -0.19, -0.37, -0.27}
	testExample(t, str, expected)
	str = "-1.4-.8-2.4,1.1"
	expected = []float64{-1.4, -0.8, -2.4, 1.1}
	testExample(t, str, expected)
	str = "41.9,38.8"
	expected = []float64{41.9, 38.8}
	testExample(t, str, expected)
	str = "-.23-.27-.49-.54-.75-.81-1.05-.18-2.1-.39-3.15-.69"
	expected = []float64{-0.23, -0.27, -0.49, -0.54, -0.75, -0.81, -1.05, -0.18, -2.1, -0.39, -3.15, -0.69}
	testExample(t, str, expected)
	str = ".1.5,2.5,2"
	expected = []float64{0.1, 0.5, 2.5, 2}
	testExample(t, str, expected)
	str = ".1,0,.2.1.3.1.3.1.8.3,1.2.4.29.06.55.12.81.17-.27-.3-.53-.59-.81-.87"
	expected = []float64{0.1, 0, 0.2, 0.1, 0.3, 0.1, 0.3, 0.1, 0.8, 0.3, 1.2, 0.4, 0.29, 0.06, 0.55, 0.12, 0.81, 0.17, -0.27, -0.3, -0.53, -0.59, -0.81, -0.87}
	testExample(t, str, expected)
	str = "2.8-1.2,5.3-2,7.2-2.5,3.9-1.1,5.5-1.1,6.1-1.1,2.5,0,4.4.7,5.3.9.8.3,2.1.7,3.6,1.7.6.4,1.3.8,2,1.6,1.8,1.9,2.2,4.3,2.4,5.5.1.8.4,2.1.1,3.9-.2,1.6-.8,2.7-1.1,3.4-.8,1.6-1.7,2.6-1.9,2.8-1,1.1-1.9,1.7-2.2,1.9-1.1.7-2.1,1.1-2.8,1.3-.8.3-1.4.4-2.6.6-.5.1-1.1.2-2.7.5-2.1.3-3.5.6-3.5.5,0,0,1.6-.4,3.5-.5,1.5-.1,2.5-.1,3.5.4.4.2.5.3,2.2,2,1.8,1.7,1.8,1.6,2.6,2.5.9.9,1.5,1.5,2.2,2.4.9,1.2,1.5,1.9,2,3,.5,1.2.6,2.1.8,3.3.2,1.3.1,2.3.1,3.3-.1,1.8-.1,2.7-.5,3.8-.2.5-.6,1.5-1.5,2.6"
	expected = []float64{2.8, -1.2, 5.3, -2, 7.2, -2.5, 3.9, -1.1, 5.5, -1.1, 6.1, -1.1, 2.5, 0, 4.4, 0.7, 5.3, 0.9, 0.8, 0.3, 2.1, 0.7, 3.6, 1.7, 0.6, 0.4, 1.3, 0.8, 2, 1.6, 1.8, 1.9, 2.2, 4.3, 2.4, 5.5, 0.1, 0.8, 0.4, 2.1, 0.1, 3.9, -0.2, 1.6, -0.8, 2.7, -1.1, 3.4, -0.8, 1.6, -1.7, 2.6, -1.9, 2.8, -1, 1.1, -1.9, 1.7, -2.2, 1.9, -1.1, 0.7, -2.1, 1.1, -2.8, 1.3, -0.8, 0.3, -1.4, 0.4, -2.6, 0.6, -0.5, 0.1, -1.1, 0.2, -2.7, 0.5, -2.1, 0.3, -3.5, 0.6, -3.5, 0.5, 0, 0, 1.6, -0.4, 3.5, -0.5, 1.5, -0.1, 2.5, -0.1, 3.5, 0.4, 0.4, 0.2, 0.5, 0.3, 2.2, 2, 1.8, 1.7, 1.8, 1.6, 2.6, 2.5, 0.9, 0.9, 1.5, 1.5, 2.2, 2.4, 0.9, 1.2, 1.5, 1.9, 2, 3, 0.5, 1.2, 0.6, 2.1, 0.8, 3.3, 0.2, 1.3, 0.1, 2.3, 0.1, 3.3, -0.1, 1.8, -0.1, 2.7, -0.5, 3.8, -0.2, 0.5, -0.6, 1.5, -1.5, 2.6}
	testExample(t, str, expected)
	str = "631 359"
	expected = []float64{631, 359}
	testExample(t, str, expected)
	str = "613 359 597 367 581 375"
	expected = []float64{613, 359, 597, 367, 581, 375}
	testExample(t, str, expected)
	str = " 0,27.301 4.9,-1.7 "
	expected = []float64{0, 27.301, 4.9, -1.7}
	testExample(t, str, expected)
}

func testNormalizeExample(t *testing.T, str, expected string) {
	fmt.Printf("Converting path: %s\n", str)
	normalized, _, err := convertPath(str)
	fmt.Printf("Normalized path: %s\n", normalized)
	if err != nil {
		panic(err)
	}
	fmt.Printf("Expected size: %v, normalised size: %v\n", len(expected), len(normalized))
	if normalized != expected {
		t.Fatalf("Expected \n%s\n, got \n%s\n", expected, normalized)
	}
}

func TestSvgNormalize(t *testing.T) {
	str := "m34.98,35.98c-1.74.51-3.84.72-6.08.82l-.2-2.6c27.46-.84,16.11-33.08-9-18-.2-.6-.72-2.05-1-2.6C39.64.23,59.39,23.76,37.97,35.07m4.94,5.4c-.97-1.04-3.76-4.59-4.94-5.4-.94.39-1.94.68-2.99.91,27.23,22.01-10.17,42.57-23.48.02l-2.6.9c13.8,41.9,50.42,27.44,34.01,3.57"
	expected := "M 34.98 35.98 C 33.24 36.49 31.14 36.70 28.90 36.80L 28.70 34.20 C 56.16 33.36 44.81 1.12 19.70 16.20C 19.50 15.60 18.98 14.15 18.70 13.60C 39.64 0.23 59.39 23.76 37.97 35.07M 42.91 40.47 C 41.94 39.43 39.15 35.88 37.97 35.07C 37.03 35.46 36.03 35.75 34.98 35.98C 62.21 57.99 24.81 78.55 11.50 36.00L 8.90 36.90 C 22.70 78.80 59.32 64.34 42.91 40.47"
	testNormalizeExample(t, str, expected)
	str = "m55.8,38.4c-1.1.1-2.1.1-3.1.2-.8.1-1.6.1-2.4.1h-.7c-.7,0-1.5-.1-2.3-.1-.9-.1-1.8-.1-2.7-.2-.4,0-.8-.1-1.2-.1-.75-.08-1.5-.19-2.25-.31.26.27.51.54.75.81l.2.8c.28.28.55.58.81.87.19.04.38.08.59.13.5.1,1,.2,1.5.3.7.1,1.4.1,2.1.2,1.3,0,2.5.1,3.8.1h1.5c1.4,0,2.7-.1,4-.3,1.58-.17,3.1-.41,4.6-.77v-2.61c-1.7.4-3.41.72-5.2.89Z"
	expected = "M 55.80 38.40 C 54.70 38.50 53.70 38.50 52.70 38.60C 51.90 38.70 51.10 38.70 50.30 38.70L 49.60 38.70 C 48.90 38.70 48.10 38.60 47.30 38.60C 46.40 38.50 45.50 38.50 44.60 38.40C 44.20 38.40 43.80 38.30 43.40 38.30C 42.65 38.22 41.90 38.11 41.15 37.99C 41.41 38.26 41.66 38.53 41.90 38.80L 42.10 39.60 C 42.38 39.88 42.65 40.18 42.91 40.47C 43.10 40.51 43.29 40.55 43.50 40.60C 44.00 40.70 44.50 40.80 45.00 40.90C 45.70 41.00 46.40 41.00 47.10 41.10C 48.40 41.10 49.60 41.20 50.90 41.20L 52.40 41.20 C 53.80 41.20 55.10 41.10 56.40 40.90C 57.98 40.73 59.50 40.49 61.00 40.13L 61.00 37.52 C 59.30 37.92 57.59 38.24 55.80 38.41Z "
	testNormalizeExample(t, str, expected)
	str = "M 75.10 13.40 L 75.10 10.80 L 52.80 10.80 L 52.80 13.40 L 61.00 13.40 61.91 13.31 62.79 13.18 63.60 13.40L 75.10 13.40 Z"
	expected = "M 75.10 13.40 L 75.10 10.80 L 52.80 10.80 L 52.80 13.40 L 61.00 13.40 L 61.91 13.31 L 62.79 13.18 L 63.60 13.40 L 75.10 13.40 Z "
	testNormalizeExample(t, str, expected)
	str = "m63.6,13.92v59.08h-2.6v-32.87c.3-.07.6-.14.9-.23v-2.6c-.3.07-.6.14-.9.21V13.78c.91-.09,1.79-.07,2.6.14Zm-1.7,23.38c-.3.07-.6.14-.9.21v2.61c.3-.07.6-.14.9-.23v-2.6Z"
	expected = "M 63.60 13.92 L 63.60 73.00 L 61.00 73.00 L 61.00 40.13 C 61.30 40.06 61.60 39.99 61.90 39.90L 61.90 37.30 C 61.60 37.37 61.30 37.44 61.00 37.51L 61.00 13.78 C 61.91 13.69 62.79 13.71 63.60 13.92Z M 61.90 37.30 C 61.60 37.37 61.30 37.44 61.00 37.51L 61.00 40.12 C 61.30 40.05 61.60 39.98 61.90 39.89L 61.90 37.29 Z "
	testNormalizeExample(t, str, expected)
	str = "m19,14.5c2.8-1.2,5.3-2,7.2-2.5,3.9-1.1,5.5-1.1,6.1-1.1,2.5,0,4.4.7,5.3.9.8.3,2.1.7,3.6,1.7.6.4,1.3.8,2,1.6,1.8,1.9,2.2,4.3,2.4,5.5.1.8.4,2.1.1,3.9-.2,1.6-.8,2.7-1.1,3.4-.8,1.6-1.7,2.6-1.9,2.8-1,1.1-1.9,1.7-2.2,1.9-1.1.7-2.1,1.1-2.8,1.3-.8.3-1.4.4-2.6.6-.5.1-1.1.2-2.7.5-2.1.3-3.5.6-3.5.5,0,0,1.6-.4,3.5-.5,1.5-.1,2.5-.1,3.5.4.4.2.5.3,2.2,2,1.8,1.7,1.8,1.6,2.6,2.5.9.9,1.5,1.5,2.2,2.4.9,1.2,1.5,1.9,2,3,.5,1.2.6,2.1.8,3.3.2,1.3.1,2.3.1,3.3-.1,1.8-.1,2.7-.5,3.8-.2.5-.6,1.5-1.5,2.6s-1.9,1.7-2.5,2.1c-.2.1-1.3.7-2.9,1.2-2.7.8-4.9.6-5.7.6-2.7-.2-4.6-1.1-5.6-1.6-2.4-1.1-3.9-2.5-4.8-3.4-.5-.5-1.7-1.7-3.7-4.4-.9-1.2-2.3-3.3-4.4-7.5-1.1-2.2-2.5-5.1-4-8.6"
	expected = "M 19.00 14.50 C 21.80 13.30 24.30 12.50 26.20 12.00C 30.10 10.90 31.70 10.90 32.30 10.90C 34.80 10.90 36.70 11.60 37.60 11.80C 38.40 12.10 39.70 12.50 41.20 13.50C 41.80 13.90 42.50 14.30 43.20 15.10C 45.00 17.00 45.40 19.40 45.60 20.60C 45.70 21.40 46.00 22.70 45.70 24.50C 45.50 26.10 44.90 27.20 44.60 27.90C 43.80 29.50 42.90 30.50 42.70 30.70C 41.70 31.80 40.80 32.40 40.50 32.60C 39.40 33.30 38.40 33.70 37.70 33.90C 36.90 34.20 36.30 34.30 35.10 34.50C 34.60 34.60 34.00 34.70 32.40 35.00C 30.30 35.30 28.90 35.60 28.90 35.50C 28.90 35.50 30.50 35.10 32.40 35.00C 33.90 34.90 34.90 34.90 35.90 35.40C 36.30 35.60 36.40 35.70 38.10 37.40C 39.90 39.10 39.90 39.00 40.70 39.90C 41.60 40.80 42.20 41.40 42.90 42.30C 43.80 43.50 44.40 44.20 44.90 45.30C 45.40 46.50 45.50 47.40 45.70 48.60C 45.90 49.90 45.80 50.90 45.80 51.90C 45.70 53.70 45.70 54.60 45.30 55.70C 45.10 56.20 44.70 57.20 43.80 58.30C 43.80 58.30 41.90 60.00 41.30 60.40C 41.10 60.50 40.00 61.10 38.40 61.60C 35.70 62.40 33.50 62.20 32.70 62.20C 30.00 62.00 28.10 61.10 27.10 60.60C 24.70 59.50 23.20 58.10 22.30 57.20C 21.80 56.70 20.60 55.50 18.60 52.80C 17.70 51.60 16.30 49.50 14.20 45.30C 13.10 43.10 11.70 40.20 10.20 36.70"
	testNormalizeExample(t, str, expected)
	str = "m62.2,12.5c.1,7.7.1,14,.1,18.4,0,10.5-.1,15.2-.1,25.4,0,7.2.1,13,.1,16.8"
	expected = "M 62.20 12.50 C 62.30 20.20 62.30 26.50 62.30 30.90C 62.30 41.40 62.20 46.10 62.20 56.30C 62.20 63.50 62.30 69.30 62.30 73.10"
	testNormalizeExample(t, str, expected)
	str = "m52.8,12.1c3.6-.2,7.2-.3,11.1-.3s7.6.1,11.2.2"
	expected = "M 52.80 12.10 C 56.40 11.90 60.00 11.80 63.90 11.80C 63.90 11.80 71.50 11.90 75.10 12.00"
	testNormalizeExample(t, str, expected)
	str = "M631 359C613 359 597 367 581 375C560 386 537 392 515 398C475 409 435 418 394 423C359 425 322 424 288 412C273 405 260 393 243 388C237 388 234 395 237 400C248 424 271 440 295 450C331 464 372 465 411 462C474 455 534 435 596 422C615 417 636 414 653 403C660 398 668 393 671 385C673 377 668 369 661 366C652 362 642 359 631 359Z"
	expected = "M 631.00 359.00 C 613.00 359.00 597.00 367.00 581.00 375.00C 560.00 386.00 537.00 392.00 515.00 398.00C 475.00 409.00 435.00 418.00 394.00 423.00C 359.00 425.00 322.00 424.00 288.00 412.00C 273.00 405.00 260.00 393.00 243.00 388.00C 237.00 388.00 234.00 395.00 237.00 400.00C 248.00 424.00 271.00 440.00 295.00 450.00C 331.00 464.00 372.00 465.00 411.00 462.00C 474.00 455.00 534.00 435.00 596.00 422.00C 615.00 417.00 636.00 414.00 653.00 403.00C 660.00 398.00 668.00 393.00 671.00 385.00C 673.00 377.00 668.00 369.00 661.00 366.00C 652.00 362.00 642.00 359.00 631.00 359.00Z "
	testNormalizeExample(t, str, expected)
	str = "M371 292C366 294 358 297 360 304C363 313 374 316 381 321C389 326 399 332 399 343C400 360 395 376 394 393C381 486 372 580 380 674C383 704 387 733 396 761C404 783 415 804 431 820C441 827 457 825 463 815C471 801 469 784 462 770C455 758 443 749 436 736C426 714 423 689 421 666C414 592 422 518 436 446C442 420 447 392 461 368C467 356 474 343 471 330C468 318 456 311 446 308C422 298 396 294 371 292Z"
	expected = "M 371.00 292.00 C 366.00 294.00 358.00 297.00 360.00 304.00C 363.00 313.00 374.00 316.00 381.00 321.00C 389.00 326.00 399.00 332.00 399.00 343.00C 400.00 360.00 395.00 376.00 394.00 393.00C 381.00 486.00 372.00 580.00 380.00 674.00C 383.00 704.00 387.00 733.00 396.00 761.00C 404.00 783.00 415.00 804.00 431.00 820.00C 441.00 827.00 457.00 825.00 463.00 815.00C 471.00 801.00 469.00 784.00 462.00 770.00C 455.00 758.00 443.00 749.00 436.00 736.00C 426.00 714.00 423.00 689.00 421.00 666.00C 414.00 592.00 422.00 518.00 436.00 446.00C 442.00 420.00 447.00 392.00 461.00 368.00C 467.00 356.00 474.00 343.00 471.00 330.00C 468.00 318.00 456.00 311.00 446.00 308.00C 422.00 298.00 396.00 294.00 371.00 292.00Z "
	testNormalizeExample(t, str, expected)
	str = "M551 535C548 534 546 538 548 540C555 554 569 566 568 583C567 599 558 613 550 626C517 680 473 726 425 767C393 793 355 814 315 823C303 826 289 825 279 817C269 806 270 791 271 777C276 742 299 712 326 690C349 671 373 654 401 642C401 632 402 621 402 611C364 624 329 644 296 667C264 690 236 720 224 759C215 789 218 824 238 849C250 864 268 874 288 875C326 878 363 862 395 843C456 806 508 756 550 698C569 671 585 643 599 613C605 601 609 588 607 574C604 563 596 554 587 547C577 540 564 534 551 535Z"
	expected = "M 551.00 535.00 C 548.00 534.00 546.00 538.00 548.00 540.00C 555.00 554.00 569.00 566.00 568.00 583.00C 567.00 599.00 558.00 613.00 550.00 626.00C 517.00 680.00 473.00 726.00 425.00 767.00C 393.00 793.00 355.00 814.00 315.00 823.00C 303.00 826.00 289.00 825.00 279.00 817.00C 269.00 806.00 270.00 791.00 271.00 777.00C 276.00 742.00 299.00 712.00 326.00 690.00C 349.00 671.00 373.00 654.00 401.00 642.00C 401.00 632.00 402.00 621.00 402.00 611.00C 364.00 624.00 329.00 644.00 296.00 667.00C 264.00 690.00 236.00 720.00 224.00 759.00C 215.00 789.00 218.00 824.00 238.00 849.00C 250.00 864.00 268.00 874.00 288.00 875.00C 326.00 878.00 363.00 862.00 395.00 843.00C 456.00 806.00 508.00 756.00 550.00 698.00C 569.00 671.00 585.00 643.00 599.00 613.00C 605.00 601.00 609.00 588.00 607.00 574.00C 604.00 563.00 596.00 554.00 587.00 547.00C 577.00 540.00 564.00 534.00 551.00 535.00Z "
	testNormalizeExample(t, str, expected)
	str = "M585 577C556 578 526 581 497 585C462 591 427 602 394 614C394 624 394 634 394 644C435 628 478 614 522 609C554 604 587 601 619 605C655 609 692 619 719 645C738 662 748 688 749 713C750 730 749 747 744 763C724 809 684 843 641 867C605 886 568 901 529 911C520 914 511 917 504 923C502 926 501 930 502 934C543 931 584 924 624 914C676 901 728 879 767 841C792 817 813 786 817 751C823 695 792 635 741 611C693 587 638 577 585 577Z"
	expected = "M 585.00 577.00 C 556.00 578.00 526.00 581.00 497.00 585.00C 462.00 591.00 427.00 602.00 394.00 614.00C 394.00 624.00 394.00 634.00 394.00 644.00C 435.00 628.00 478.00 614.00 522.00 609.00C 554.00 604.00 587.00 601.00 619.00 605.00C 655.00 609.00 692.00 619.00 719.00 645.00C 738.00 662.00 748.00 688.00 749.00 713.00C 750.00 730.00 749.00 747.00 744.00 763.00C 724.00 809.00 684.00 843.00 641.00 867.00C 605.00 886.00 568.00 901.00 529.00 911.00C 520.00 914.00 511.00 917.00 504.00 923.00C 502.00 926.00 501.00 930.00 502.00 934.00C 543.00 931.00 584.00 924.00 624.00 914.00C 676.00 901.00 728.00 879.00 767.00 841.00C 792.00 817.00 813.00 786.00 817.00 751.00C 823.00 695.00 792.00 635.00 741.00 611.00C 693.00 587.00 638.00 577.00 585.00 577.00Z "
	testNormalizeExample(t, str, expected)
}
